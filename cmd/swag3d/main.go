package main

import (
	"fmt"
	"io"
	"log"
	"os"

	"github.com/recolude/swagger-unity-codegen/unitygen"
	"github.com/recolude/swagger-unity-codegen/unitygen/convention"
	"github.com/spf13/afero"
	"github.com/urfave/cli/v2"
)

func filterSpecForTags(spec unitygen.Spec, tags []string) {
	if tags == nil {
		return
	}
	filteredServices := make([]unitygen.Service, 0)
	for _, service := range spec.Services {

		for _, tag := range tags {
			if service.Name() == tag {
				filteredServices = append(filteredServices, service)
			}
		}
	}
	spec.Services = filteredServices
}

func buildApp(fs afero.Fs, out io.Writer, errOut io.Writer) *cli.App {
	return &cli.App{
		Name:        "swag3d",
		Description: "Generate C# code specifically for Unity3D from a swagger file",
		Version:     "0.1.0",
		Usage:       "swagger and Unity3D meet",
		Writer:      out,
		ErrWriter:   errOut,
		Authors: []*cli.Author{
			{
				Name: "Elijah C Davis",
			},
		},
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:  "file, f",
				Usage: "where to load swagger from",
				Value: "swagger.json",
			},
		},
		Commands: []*cli.Command{
			{
				Name:    "generate",
				Aliases: []string{"g"},
				Usage:   "Generate c# code from a swagger file",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:  "namespace",
						Usage: "The namespace the code will be wrapped in",
					},
					&cli.StringFlag{
						Name:        "config-name",
						Usage:       "The name of the config class that will contain all server variables",
						DefaultText: "ServiceConfig",
					},
					&cli.StringFlag{
						Name:        "config-menu",
						Usage:       "Name to be listed in the Assets/Create submenu, so that instances of the server config can be easily created and stored in the project as \".asset\"",
						DefaultText: "Server/Config",
					},
					&cli.StringSliceFlag{
						Name:  "tags",
						Usage: "Specify tags that a route must have to be included in the export. Specifying no tags means include all routes",
					},
				},
				Action: func(c *cli.Context) error {
					file, err := fs.Open(c.String("file"))
					if err != nil {
						fmt.Fprintf(cli.ErrWriter, "Error opening swagger file: %s", err.Error())
					}

					spec, err := unitygen.Parser{}.ParseJSON(file)
					if err != nil {
						fmt.Fprintf(cli.ErrWriter, "Error opening swagger file: %s", err.Error())
					}

					filterSpecForTags(spec, c.StringSlice("tags"))

					fmt.Fprintln(c.App.Writer, "// This code was generated by: ")
					fmt.Fprintln(c.App.Writer, "// https://github.com/recolude/swagger-unity-codegen")
					fmt.Fprintln(c.App.Writer, "// Issues and PRs welcome :)")
					fmt.Fprintln(c.App.Writer, "")

					// imports
					fmt.Fprintln(c.App.Writer, "using UnityEngine;")
					fmt.Fprintln(c.App.Writer, "using UnityEngine.Networking;")
					fmt.Fprintln(c.App.Writer, "using System.Collections;")
					fmt.Fprintln(c.App.Writer, "")

					namespace := c.String("namespace")

					if namespace != "" {
						fmt.Fprintf(c.App.Writer, "namespace %s {\n\n", convention.TitleCase(namespace))
					}

					// Define out all classes!
					fmt.Fprint(c.App.Writer, "#region Definitions\n\n")
					for _, def := range spec.Definitions {
						fmt.Fprintf(c.App.Writer, "%s\n\n", def.ToCSharp())
					}
					fmt.Fprintf(c.App.Writer, "%s\n\n", "#endregion")

					fmt.Fprintf(c.App.Writer, "%s\n\n", "#region Services")
					fmt.Fprintf(c.App.Writer, "%s\n\n", spec.ServiceConfig(c.String("config-name"), c.String("config-menu")))
					for _, service := range spec.Services {
						fmt.Fprintf(c.App.Writer, "%s\n\n", service.ToCSharp(spec.AuthDefinitions, c.String("config-name")))
					}
					fmt.Fprint(c.App.Writer, "#endregion\n\n")

					if namespace != "" {
						fmt.Fprint(c.App.Writer, "}")
					}

					return nil
				},
			},
		},
	}
}

func main() {
	app := buildApp(afero.NewOsFs(), os.Stdout, os.Stderr)

	err := app.Run(os.Args)
	if err != nil {
		log.Fatal(err)
	}
}
